package com.eventhorizonwebdesign.cpocketreference;
// The package is a method of encapsulation. Every class in a package has access to the others' protected methods and variables.

import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.widget.ExpandableListView;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
// Import statements are the equivalent to the C++ #include <>. These import the code from other classes or packages to be used in this one.

public class MainMenuActivity extends AppCompatActivity {
    // The class is another method of encapsulation. Typically, every file has a class inside it named after it.

    ExpandableListAdapter listAdapter;
    ExpandableListView expListView;
    List<String> listDataHeader;
    HashMap<String, List<String>> listDataChild;

    @Override
    // This is a special annotation. You don't need to know much about these except that onCreate methods must always override that of their superclass.
    protected void onCreate(Bundle savedInstanceState) {
        // The onCreate method defined here will override the contents of the onCreate method in the AppCompatActivity constructor that we are extending.
        super.onCreate(savedInstanceState);
        // This line calls the onCreate method of the superclass on any saved instance (reloads where the user left off)
        setContentView(R.layout.activity_main_menu);
        // You will use setContentView a lot. This inflates the activity_main_menu XML file and links it to this class.


        expListView = (ExpandableListView) findViewById(R.id.chapter_list);
        // To use an UI element, you have to declare and link its counterpart in Java.
        // This line does the following:
            // Gets the ExpandableListView object (Java) from above
            // Calls findViewById on the integer value R.id.chapter_list (This is a value generated by ADK. DO NOT EDIT R.java or R.class!!!!!!!!)
            // Typecasts the View object response to the subclass of view, ExpandableListView
            // Sets expListView to the result
            // chapter_list can now be programatically manipulated by using its Java counterpart, expListView

        prepareListData();
        // This line calls the method prepareListData. Notice that no prototype is required in Java.

        listAdapter = new ExpandableListAdapter(this, listDataHeader, listDataChild);
        // Every ListView needs a ListAdapter. This line makes a new ExpandableListAdapter object with the params:
            // 1. this - "this" is a keyword in java, meaning the next encapsulation method (usually class) up in the heirarchy of encapsulation
            // 2. listDataHeader - This only works because prepareListData has made the value non-null. This adds the header views.
            // 3. listDataChild - Same as above, this adds the children views.

        expListView.setAdapter(listAdapter);
        // This line just sets the list adapter
    }

    private void prepareListData() {
        listDataHeader = new ArrayList<String>();
        listDataChild = new HashMap<String, List<String>>();

        // Adding header data
        listDataHeader.add("Reference");

        // Adding child data
        List<String> reference = new ArrayList<String>();
        reference.add("ASCII table");
        reference.add("Primitive Types");

        listDataChild.put(listDataHeader.get(0), reference); // Header, Child data
    }

    /**
     * A native method that is implemented by the 'native-lib' native library,
     * which is packaged with this application.
     */
    public native String stringFromJNI();

    // Used to load the 'native-lib' library on application startup.
    static {
        System.loadLibrary("native-lib");
    }
}
